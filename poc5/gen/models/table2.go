// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/oklog/ulid/v2"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Table2 is an object representing the database table.
type Table2 struct {
	ID       ulid.ULID `boil:"id" json:"id" toml:"id" yaml:"id"`
	Table1ID ulid.ULID `boil:"table1_id" json:"table1_id" toml:"table1_id" yaml:"table1_id"`
	F2       string    `boil:"f2" json:"f2" toml:"f2" yaml:"f2"`

	R *table2R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L table2L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Table2Columns = struct {
	ID       string
	Table1ID string
	F2       string
}{
	ID:       "id",
	Table1ID: "table1_id",
	F2:       "f2",
}

var Table2TableColumns = struct {
	ID       string
	Table1ID string
	F2       string
}{
	ID:       "table2.id",
	Table1ID: "table2.table1_id",
	F2:       "table2.f2",
}

// Generated where

var Table2Where = struct {
	ID       whereHelperulid_ULID
	Table1ID whereHelperulid_ULID
	F2       whereHelperstring
}{
	ID:       whereHelperulid_ULID{field: "`table2`.`id`"},
	Table1ID: whereHelperulid_ULID{field: "`table2`.`table1_id`"},
	F2:       whereHelperstring{field: "`table2`.`f2`"},
}

// Table2Rels is where relationship names are stored.
var Table2Rels = struct {
	Table1 string
}{
	Table1: "Table1",
}

// table2R is where relationships are stored.
type table2R struct {
	Table1 *Table1 `boil:"Table1" json:"Table1" toml:"Table1" yaml:"Table1"`
}

// NewStruct creates a new relationship struct
func (*table2R) NewStruct() *table2R {
	return &table2R{}
}

func (r *table2R) GetTable1() *Table1 {
	if r == nil {
		return nil
	}
	return r.Table1
}

// table2L is where Load methods for each relationship are stored.
type table2L struct{}

var (
	table2AllColumns            = []string{"id", "table1_id", "f2"}
	table2ColumnsWithoutDefault = []string{"id", "table1_id", "f2"}
	table2ColumnsWithDefault    = []string{}
	table2PrimaryKeyColumns     = []string{"id"}
	table2GeneratedColumns      = []string{}
)

type (
	// Table2Slice is an alias for a slice of pointers to Table2.
	// This should almost always be used instead of []Table2.
	Table2Slice []*Table2
	// Table2Hook is the signature for custom Table2 hook methods
	Table2Hook func(context.Context, boil.ContextExecutor, *Table2) error

	table2Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	table2Type                 = reflect.TypeOf(&Table2{})
	table2Mapping              = queries.MakeStructMapping(table2Type)
	table2PrimaryKeyMapping, _ = queries.BindMapping(table2Type, table2Mapping, table2PrimaryKeyColumns)
	table2InsertCacheMut       sync.RWMutex
	table2InsertCache          = make(map[string]insertCache)
	table2UpdateCacheMut       sync.RWMutex
	table2UpdateCache          = make(map[string]updateCache)
	table2UpsertCacheMut       sync.RWMutex
	table2UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var table2AfterSelectHooks []Table2Hook

var table2BeforeInsertHooks []Table2Hook
var table2AfterInsertHooks []Table2Hook

var table2BeforeUpdateHooks []Table2Hook
var table2AfterUpdateHooks []Table2Hook

var table2BeforeDeleteHooks []Table2Hook
var table2AfterDeleteHooks []Table2Hook

var table2BeforeUpsertHooks []Table2Hook
var table2AfterUpsertHooks []Table2Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Table2) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Table2) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Table2) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Table2) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Table2) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Table2) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Table2) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Table2) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Table2) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range table2AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTable2Hook registers your hook function for all future operations.
func AddTable2Hook(hookPoint boil.HookPoint, table2Hook Table2Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		table2AfterSelectHooks = append(table2AfterSelectHooks, table2Hook)
	case boil.BeforeInsertHook:
		table2BeforeInsertHooks = append(table2BeforeInsertHooks, table2Hook)
	case boil.AfterInsertHook:
		table2AfterInsertHooks = append(table2AfterInsertHooks, table2Hook)
	case boil.BeforeUpdateHook:
		table2BeforeUpdateHooks = append(table2BeforeUpdateHooks, table2Hook)
	case boil.AfterUpdateHook:
		table2AfterUpdateHooks = append(table2AfterUpdateHooks, table2Hook)
	case boil.BeforeDeleteHook:
		table2BeforeDeleteHooks = append(table2BeforeDeleteHooks, table2Hook)
	case boil.AfterDeleteHook:
		table2AfterDeleteHooks = append(table2AfterDeleteHooks, table2Hook)
	case boil.BeforeUpsertHook:
		table2BeforeUpsertHooks = append(table2BeforeUpsertHooks, table2Hook)
	case boil.AfterUpsertHook:
		table2AfterUpsertHooks = append(table2AfterUpsertHooks, table2Hook)
	}
}

// One returns a single table2 record from the query.
func (q table2Query) One(ctx context.Context, exec boil.ContextExecutor) (*Table2, error) {
	o := &Table2{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for table2")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Table2 records from the query.
func (q table2Query) All(ctx context.Context, exec boil.ContextExecutor) (Table2Slice, error) {
	var o []*Table2

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Table2 slice")
	}

	if len(table2AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Table2 records in the query.
func (q table2Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count table2 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q table2Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if table2 exists")
	}

	return count > 0, nil
}

// Table1 pointed to by the foreign key.
func (o *Table2) Table1(mods ...qm.QueryMod) table1Query {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.Table1ID),
	}

	queryMods = append(queryMods, mods...)

	return Table1s(queryMods...)
}

// LoadTable1 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (table2L) LoadTable1(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTable2 interface{}, mods queries.Applicator) error {
	var slice []*Table2
	var object *Table2

	if singular {
		var ok bool
		object, ok = maybeTable2.(*Table2)
		if !ok {
			object = new(Table2)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTable2)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTable2))
			}
		}
	} else {
		s, ok := maybeTable2.(*[]*Table2)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTable2)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTable2))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &table2R{}
		}
		if !queries.IsNil(object.Table1ID) {
			args = append(args, object.Table1ID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &table2R{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Table1ID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Table1ID) {
				args = append(args, obj.Table1ID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`table1`),
		qm.WhereIn(`table1.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Table1")
	}

	var resultSlice []*Table1
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Table1")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for table1")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for table1")
	}

	if len(table2AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Table1 = foreign
		if foreign.R == nil {
			foreign.R = &table1R{}
		}
		foreign.R.Table2s = append(foreign.R.Table2s, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Table1ID, foreign.ID) {
				local.R.Table1 = foreign
				if foreign.R == nil {
					foreign.R = &table1R{}
				}
				foreign.R.Table2s = append(foreign.R.Table2s, local)
				break
			}
		}
	}

	return nil
}

// SetTable1 of the table2 to the related item.
// Sets o.R.Table1 to related.
// Adds o to related.R.Table2s.
func (o *Table2) SetTable1(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Table1) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `table2` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"table1_id"}),
		strmangle.WhereClause("`", "`", 0, table2PrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Table1ID, related.ID)
	if o.R == nil {
		o.R = &table2R{
			Table1: related,
		}
	} else {
		o.R.Table1 = related
	}

	if related.R == nil {
		related.R = &table1R{
			Table2s: Table2Slice{o},
		}
	} else {
		related.R.Table2s = append(related.R.Table2s, o)
	}

	return nil
}

// Table2s retrieves all the records using an executor.
func Table2s(mods ...qm.QueryMod) table2Query {
	mods = append(mods, qm.From("`table2`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`table2`.*"})
	}

	return table2Query{q}
}

// FindTable2 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTable2(ctx context.Context, exec boil.ContextExecutor, iD ulid.ULID, selectCols ...string) (*Table2, error) {
	table2Obj := &Table2{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `table2` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, table2Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from table2")
	}

	if err = table2Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return table2Obj, err
	}

	return table2Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Table2) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no table2 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(table2ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	table2InsertCacheMut.RLock()
	cache, cached := table2InsertCache[key]
	table2InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			table2AllColumns,
			table2ColumnsWithDefault,
			table2ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(table2Type, table2Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(table2Type, table2Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `table2` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `table2` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `table2` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, table2PrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into table2")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for table2")
	}

CacheNoHooks:
	if !cached {
		table2InsertCacheMut.Lock()
		table2InsertCache[key] = cache
		table2InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Table2.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Table2) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	table2UpdateCacheMut.RLock()
	cache, cached := table2UpdateCache[key]
	table2UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			table2AllColumns,
			table2PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update table2, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `table2` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, table2PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(table2Type, table2Mapping, append(wl, table2PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update table2 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for table2")
	}

	if !cached {
		table2UpdateCacheMut.Lock()
		table2UpdateCache[key] = cache
		table2UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q table2Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for table2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for table2")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Table2Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), table2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `table2` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, table2PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in table2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all table2")
	}
	return rowsAff, nil
}

var mySQLTable2UniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Table2) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no table2 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(table2ColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTable2UniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	table2UpsertCacheMut.RLock()
	cache, cached := table2UpsertCache[key]
	table2UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			table2AllColumns,
			table2ColumnsWithDefault,
			table2ColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			table2AllColumns,
			table2PrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert table2, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`table2`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `table2` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(table2Type, table2Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(table2Type, table2Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for table2")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(table2Type, table2Mapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for table2")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for table2")
	}

CacheNoHooks:
	if !cached {
		table2UpsertCacheMut.Lock()
		table2UpsertCache[key] = cache
		table2UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Table2 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Table2) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Table2 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), table2PrimaryKeyMapping)
	sql := "DELETE FROM `table2` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from table2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for table2")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q table2Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no table2Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from table2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for table2")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Table2Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(table2BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), table2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `table2` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, table2PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from table2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for table2")
	}

	if len(table2AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Table2) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTable2(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Table2Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Table2Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), table2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `table2`.* FROM `table2` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, table2PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in Table2Slice")
	}

	*o = slice

	return nil
}

// Table2Exists checks if the Table2 row exists.
func Table2Exists(ctx context.Context, exec boil.ContextExecutor, iD ulid.ULID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `table2` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if table2 exists")
	}

	return exists, nil
}
